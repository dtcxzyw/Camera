#include <Sampler/SequenceGenerator.hpp>

DEVICE float scaleToFloat(const uint32_t val) {
    union Result {
        uint32_t u;
        float f;
    } result; // Write reversed bits directly into floating-point mantissa.
    result.u = 0x3f800000u | (val >> 9);
    return result.f - 1.0f;
}

DEVICE float radicalInverse2(uint32_t index) {
    index = (index << 16u) | (index >> 16u);
    index = ((index & 0x55555555u) << 1u) | ((index & 0xAAAAAAAAu) >> 1u);
    index = ((index & 0x33333333u) << 2u) | ((index & 0xCCCCCCCCu) >> 2u);
    index = ((index & 0x0F0F0F0Fu) << 4u) | ((index & 0xF0F0F0F0u) >> 4u);
    index = ((index & 0x00FF00FFu) << 8u) | ((index & 0xFF00FF00u) >> 8u);
    return scaleToFloat(index);
}

DEVICE float halton3(const uint32_t index) {
    constexpr uint32_t perm3[243] = {
        0, 81, 162, 27, 108, 189, 54, 135, 216, 9, 90, 171, 36, 117, 198, 63, 144, 225, 18, 99, 180, 45, 126, 207, 72,
        153, 234, 3, 84, 165, 30, 111, 192, 57, 138, 219, 12, 93, 174, 39, 120, 201, 66, 147, 228, 21, 102, 183, 48,
        129, 210, 75, 156, 237, 6, 87, 168, 33, 114, 195, 60, 141, 222, 15, 96, 177, 42, 123, 204, 69, 150, 231, 24,
        105, 186, 51, 132, 213, 78, 159, 240, 1, 82, 163, 28, 109, 190, 55, 136, 217, 10, 91, 172, 37, 118, 199, 64,
        145, 226, 19, 100, 181, 46, 127, 208, 73, 154, 235, 4, 85, 166, 31, 112, 193, 58, 139, 220, 13, 94, 175, 40,
        121, 202, 67, 148, 229, 22, 103, 184, 49, 130, 211, 76, 157, 238, 7, 88, 169, 34, 115, 196, 61, 142, 223, 16,
        97, 178, 43, 124, 205, 70, 151, 232, 25, 106, 187, 52, 133, 214, 79, 160, 241, 2, 83, 164, 29, 110, 191, 56,
        137, 218, 11, 92, 173, 38, 119, 200, 65, 146, 227, 20, 101, 182, 47, 128, 209, 74, 155, 236, 5, 86, 167, 32,
        113, 194, 59, 140, 221, 14, 95, 176, 41, 122, 203, 68, 149, 230, 23, 104, 185, 50, 131, 212, 77, 158, 239, 8,
        89, 170, 35, 116, 197, 62, 143, 224, 17, 98, 179, 44, 125, 206, 71, 152, 233, 26, 107, 188, 53, 134, 215, 80,
        161, 242
    };
    return (perm3[index % 243u] * 14348907u +
        perm3[(index / 243u) % 243u] * 59049u +
        perm3[(index / 59049u) % 243u] * 243u +
        perm3[(index / 14348907u) % 243u]) * 2.8679716489035376e-10f;
}

DEVICE float halton5(const uint32_t index) {
    constexpr uint32_t perm5[125] = {
        0, 75, 50, 25, 100, 15, 90, 65, 40, 115, 10, 85, 60, 35, 110, 5, 80, 55, 30, 105, 20, 95, 70, 45, 120, 3, 78,
        53, 28, 103, 18, 93, 68, 43, 118, 13, 88, 63, 38, 113, 8, 83, 58, 33, 108, 23, 98, 73, 48, 123, 2, 77, 52, 27,
        102, 17, 92, 67, 42, 117, 12, 87, 62, 37, 112, 7, 82, 57, 32, 107, 22, 97, 72, 47, 122, 1, 76, 51, 26, 101, 16,
        91, 66, 41, 116, 11, 86, 61, 36, 111, 6, 81, 56, 31, 106, 21, 96, 71, 46, 121, 4, 79, 54, 29, 104, 19, 94, 69,
        44, 119, 14, 89, 64, 39, 114, 9, 84, 59, 34, 109, 24, 99, 74, 49, 124
    };
    return (perm5[index % 125u] * 1953125u +
        perm5[(index / 125u) % 125u] * 15625u +
        perm5[(index / 15625u) % 125u] * 125u +
        perm5[(index / 1953125u) % 125u]) * 4.0959995117187502143300693988e-09f;
}

DEVICE float halton7(const uint32_t index) {
    constexpr uint32_t perm7[343] = {
        0, 98, 245, 147, 49, 196, 294, 14, 112, 259, 161, 63, 210, 308, 35, 133, 280, 182, 84, 231, 329, 21, 119, 266,
        168, 70, 217, 315, 7, 105, 252, 154, 56, 203, 301, 28, 126, 273, 175, 77, 224, 322, 42, 140, 287, 189, 91, 238,
        336, 2, 100, 247, 149, 51, 198, 296, 16, 114, 261, 163, 65, 212, 310, 37, 135, 282, 184, 86, 233, 331, 23, 121,
        268, 170, 72, 219, 317, 9, 107, 254, 156, 58, 205, 303, 30, 128, 275, 177, 79, 226, 324, 44, 142, 289, 191, 93,
        240, 338, 5, 103, 250, 152, 54, 201, 299, 19, 117, 264, 166, 68, 215, 313, 40, 138, 285, 187, 89, 236, 334, 26,
        124, 271, 173, 75, 222, 320, 12, 110, 257, 159, 61, 208, 306, 33, 131, 278, 180, 82, 229, 327, 47, 145, 292,
        194, 96, 243, 341, 3, 101, 248, 150, 52, 199, 297, 17, 115, 262, 164, 66, 213, 311, 38, 136, 283, 185, 87, 234,
        332, 24, 122, 269, 171, 73, 220, 318, 10, 108, 255, 157, 59, 206, 304, 31, 129, 276, 178, 80, 227, 325, 45, 143,
        290, 192, 94, 241, 339, 1, 99, 246, 148, 50, 197, 295, 15, 113, 260, 162, 64, 211, 309, 36, 134, 281, 183, 85,
        232, 330, 22, 120, 267, 169, 71, 218, 316, 8, 106, 253, 155, 57, 204, 302, 29, 127, 274, 176, 78, 225, 323, 43,
        141, 288, 190, 92, 239, 337, 4, 102, 249, 151, 53, 200, 298, 18, 116, 263, 165, 67, 214, 312, 39, 137, 284, 186,
        88, 235, 333, 25, 123, 270, 172, 74, 221, 319, 11, 109, 256, 158, 60, 207, 305, 32, 130, 277, 179, 81, 228, 326,
        46, 144, 291, 193, 95, 242, 340, 6, 104, 251, 153, 55, 202, 300, 20, 118, 265, 167, 69, 216, 314, 41, 139, 286,
        188, 90, 237, 335, 27, 125, 272, 174, 76, 223, 321, 13, 111, 258, 160, 62, 209, 307, 34, 132, 279, 181, 83, 230,
        328, 48, 146, 293, 195, 97, 244, 342
    };
    return (perm7[index % 343u] * 117649u +
        perm7[(index / 343u) % 343u] * 343u +
        perm7[(index / 117649u) % 343u]) * 2.47809292683727237819278892833e-08f;
}

DEVICE float halton11(const uint32_t index) {
    constexpr uint32_t perm11[121] = {
        0, 77, 44, 22, 99, 55, 11, 88, 66, 33, 110, 7, 84, 51, 29, 106, 62, 18, 95, 73, 40, 117, 4, 81, 48, 26, 103, 59,
        15, 92, 70, 37, 114, 2, 79, 46, 24, 101, 57, 13, 90, 68, 35, 112, 9, 86, 53, 31, 108, 64, 20, 97, 75, 42, 119,
        5, 82, 49, 27, 104, 60, 16, 93, 71, 38, 115, 1, 78, 45, 23, 100, 56, 12, 89, 67, 34, 111, 8, 85, 52, 30, 107,
        63, 19, 96, 74, 41, 118, 6, 83, 50, 28, 105, 61, 17, 94, 72, 39, 116, 3, 80, 47, 25, 102, 58, 14, 91, 69, 36,
        113, 10, 87, 54, 32, 109, 65, 21, 98, 76, 43, 120
    };
    return (perm11[index % 121u] * 1771561u +
        perm11[(index / 121u) % 121u] * 14641u +
        perm11[(index / 14641u) % 121u] * 121u +
        perm11[(index / 1771561u) % 121u]) * 4.66507324597720075732882623722e-09f;
}

DEVICE float scrambledSobol(const uint32_t index, const uint32_t dim, const uint32_t scramble) {
    constexpr uint32_t mat[2][32] = {
        {
            0x80000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000,
            0x02000000, 0x01000000, 0x00800000, 0x00400000, 0x00200000, 0x00100000,
            0x00080000, 0x00040000, 0x00020000, 0x00010000, 0x00008000, 0x00004000,
            0x00002000, 0x00001000, 0x00000800, 0x00000400, 0x00000200, 0x00000100,
            0x00000080, 0x00000040, 0x00000020, 0x00000010, 0x00000008, 0x00000004,
            0x00000002, 0x00000001
        },
        {
            0x80000000, 0xc0000000, 0xa0000000, 0xf0000000, 0x88000000, 0xcc000000,
            0xaa000000, 0xff000000, 0x80800000, 0xc0c00000, 0xa0a00000, 0xf0f00000,
            0x88880000, 0xcccc0000, 0xaaaa0000, 0xffff0000, 0x80008000, 0xc000c000,
            0xa000a000, 0xf000f000, 0x88008800, 0xcc00cc00, 0xaa00aa00, 0xff00ff00,
            0x80808080, 0xc0c0c0c0, 0xa0a0a0a0, 0xf0f0f0f0, 0x88888888, 0xcccccccc,
            0xaaaaaaaa, 0xffffffff
        }
    };

    auto res = scramble;
    #pragma unroll
    for (auto i = 0; i < 32; ++i)
        res ^= (index & (1U << i) ? 0xffffffff : 0) & mat[dim][i];
    return scaleToFloat(res);
}
